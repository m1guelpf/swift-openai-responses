import Foundation

fileprivate typealias RootInput = Input

public enum Message: Equatable, Hashable, Sendable {
	/// The role of a message.
	public enum Role: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
		case user
		case system
		case assistant
		case developer
	}

	/// The status of a message.
	public enum Status: String, CaseIterable, Equatable, Codable, Sendable {
		case completed
		case incomplete
		case inProgress = "in_progress"
	}

	/// The content of a message.
	public enum MessageContent: Equatable, Hashable, Sendable {
		/// Text, image, or audio input to the model, used to generate a response. Can also contain previous assistant responses.
		case input(OpenAI.Input.Content)

		/// The content of the output message.
		case output([Item.Output.Content])
	}

	/// A message input to the model with a role indicating instruction following hierarchy.
	///
	/// Instructions given with the `developer` or `system` role take precedence over instructions given with the `user` role.
	///
	/// Messages with the `assistant` role are presumed to have been generated by the model in previous interactions.
	public struct Input: Equatable, Hashable, Codable, Sendable {
		/// The role of the message input.
		public var role: Role

		/// The status of the message. Populated when the message is returned via API.
		public var status: Status?

		/// Text, image, or audio input to the model, used to generate a response. Can also contain previous assistant responses.
		public var content: OpenAI.Input.Content

		/// The text content of the input.
		public var text: String? {
			return content.text
		}

		public init(role: Role = .user, content: OpenAI.Input.Content, status: Status? = nil) {
			self.role = role
			self.status = status
			self.content = content
		}
	}

	/// An output message from the model.
	public struct Output: Equatable, Hashable, Codable, Sendable {
		/// The content of the output message.
		public var content: [Item.Output.Content]

		/// The unique ID of the output message.
		public var id: String

		/// The role of the output message. Always `assistant`.
		public var role: Role

		/// The status of the message output.
		public var status: Status

		/// The text content of the output.
		///
		/// > Note: Annotations are not included when using this property.
		public var text: String {
			return content.map(\.text).joined()
		}

		/// Creates a new output message.
		///
		/// - Parameter content: The content of the output message.
		/// - Parameter id: The unique ID of the output message.
		/// - Parameter role: The role of the output message. Always `assistant`.
		/// - Parameter status: The status of the message output.
		public init(content: [Item.Output.Content] = [], id: String, role: Role = .assistant, status: Status) {
			self.content = content
			self.id = id
			self.role = role
			self.status = status
		}
	}

	/// An input message to the model.
	case input(Input)

	/// An output message from the model.
	case output(Output)

	/// The role of a message.
	public var role: Role {
		switch self {
			case let .input(input): input.role
			case let .output(output): output.role
		}
	}

	/// The content of the message.
	public var content: MessageContent {
		switch self {
			case let .input(input): .input(input.content)
			case let .output(output): .output(output.content)
		}
	}

	/// The status of the message.
	public var status: Status? {
		switch self {
			case let .input(input): input.status
			case let .output(output): output.status
		}
	}

	/// The unique ID of the message, if available.
	public var id: String? {
		switch self {
			case .input: return nil
			case let .output(output): return output.id
		}
	}

	/// The text content of the input.
	///
	/// > Note: This property does not include reasoning text.
	public var text: String? {
		switch self {
			case let .input(message):
				return message.text
			case let .output(message):
				return message.text
		}
	}
}
