import Foundation
import MetaCodable

/// Text, image, or file inputs to the model, used to generate a response.
@Codable @UnTagged public enum Input: Equatable, Hashable, Sendable {
	/// A list of items used to generate a model response.
	@Codable @CodingKeys(.snake_case) public struct ItemList: Equatable, Hashable, Sendable {
		/// A list of items used to generate this response.
		public var data: [Item.Input]

		/// The ID of the first item in the list.
		public var firstId: String

		/// The ID of the last item in the list.
		public var lastId: String

		/// Whether there are more items available.
		public var hasMore: Bool
	}

	@Codable @CodedAt("type") public enum ListItem: Equatable, Hashable, Sendable {
		/// A message input to the model with a role indicating instruction following hierarchy.
		///
		/// Instructions given with the `developer` or `system` role take precedence over instructions given with the `user` role.
		///
		/// Messages with the `assistant` role are presumed to have been generated by the model in previous interactions.
		case message(Message.Input)

		/// An internal identifier for an item to reference.
		/// - Parameter id: The ID of the item to reference.
		@CodedAs("item_reference")
		case itemRef(
			id: String
		)

		/// An item representing part of the context for the response to be generated by the model.
		/// Can contain text, images, and audio inputs, as well as previous assistant responses and tool call outputs.
		case item(Item.Input)
	}

	/// Text, image, or audio input to the model, used to generate a response. Can also contain previous assistant responses.
	@Codable @UnTagged public enum Content: Equatable, Hashable, Sendable {
		/// Text, image, or audio input to the model, used to generate a response. Can also contain previous assistant responses.
		@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum ContentItem: Equatable, Hashable, Sendable {
			/// The detail level of the image sent to the model.
			public enum ImageDetail: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
				case auto
				case low
				case high
				case medium
			}

			/// A text input to the model.
			@CodedAs("input_text") case text(_ text: String)

			/// An image input to the model. Learn about [image inputs](https://platform.openai.com/docs/guides/vision).
			/// - Parameter detail: The detail level of the image to be sent to the model.
			/// - Parameter fileId: The ID of the file to be sent to the model.
			/// - Parameter imageUrl: The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.
			@CodedAs("input_image") case image(
				detail: ImageDetail = .auto,
				fileId: String? = nil,
				imageUrl: String? = nil
			)

			/// A file input to the model.
			/// - Parameter fileData: The content of the file to be sent to the model.
			/// - Parameter fileId: The ID of the file to be sent to the model.
			/// - Parameter fileUrl: The URL of the file to be sent to the model.
			/// - Parameter filename:  The name of the file to be sent to the model.
			@CodedAs("input_file") case file(
				fileData: String? = nil,
				fileId: String? = nil,
				fileUrl: URL? = nil,
				filename: String? = nil
			)
		}

		/// A text input to the model, equivalent to a text input.
		case text(String)

		/// A list of one or many content items to the model, containing different content types.
		case list([ContentItem])
	}

	/// The messages contained in the input.
	public var messages: [Message] {
		switch self {
			case let .text(text): return [.input(.init(role: .user, content: .text(text)))]
			case let .list(items): return items.compactMap { item in
					switch item {
						case let .message(message): .input(message)
						case let .item(item): item.message
						default: nil
					}
				}
		}
	}

	/// The text content of the input.
	public var inputText: String? {
		switch self {
			case let .text(text): text
			case let .list(items): items.compactMap { item in
					switch item {
						case let .message(message): return message.content.text
						case let .item(item): return item.text
						default: return nil
					}
				}.joined(separator: " ")
		}
	}

	/// A text input to the model, equivalent to a text input with the user role.
	case text(String)

	/// A list of one or many input items to the model, containing different content types.
	case list([ListItem])
}

public extension Input {
	/// Creates a new input to the model with a single message.
	///
	/// - Parameter role: The role of the message input.
	/// - Parameter text: The text content of the message.
	/// - Parameter status: The status of the message. Populated when the message is returned via API.
	static func message(role: Message.Role = .user, text: String, status: Message.Status? = nil) -> Self {
		.list([.message(Message.Input(role: role, content: .text(text), status: status))])
	}

	/// Creates a new input to the model with a single message.
	///
	/// - Parameter role: The role of the message input.
	/// - Parameter content: A list of one or many input items to the model, containing different content types.
	/// - Parameter status: The status of the message. Populated when the message is returned via API.
	static func message(role: Message.Role = .user, content: [Input.Content.ContentItem], status: Message.Status? = nil) -> Self {
		.list([.message(Message.Input(role: role, content: .list(content), status: status))])
	}

	/// Creates a new input to the model with a single item.
	static func item(_ item: Input.ListItem) -> Self {
		.list([item])
	}
}

public extension Input.Content {
	/// Creates a new image input to the model.
	/// - Parameter detail: The detail level of the image to be sent to the model.
	/// - Parameter fileId: The ID of the file to be sent to the model.
	/// - Parameter imageUrl: The URL of the image to be sent to the model. A fully qualified URL or base64 encoded image in a data URL.
	static func image(detail: ContentItem.ImageDetail = .auto, fileId: String? = nil, url: String? = nil) -> Self {
		.list([.image(detail: detail, fileId: fileId, imageUrl: url)])
	}

	/// Creates a new file input to the model.
	/// - Parameter fileData: The content of the file to be sent to the model.
	/// - Parameter fileId: The ID of the file to be sent to the model.
	/// - Parameter fileUrl: The URL of the file to be sent to the model.
	/// - Parameter filename:  The name of the file to be sent to the model.
	static func file(fileData: String? = nil, fileId: String? = nil, fileUrl: URL? = nil, filename: String? = nil) -> Self {
		.list([.file(fileData: fileData, fileId: fileId, fileUrl: fileUrl, filename: filename)])
	}
}

// MARK: - Text helpers

public extension Input.Content {
	/// The text content of the input.
	var text: String? {
		switch self {
			case let .text(text): text
			case let .list(items): items.compactMap { item in
					if case let .text(text) = item { return text }
					return nil
				}.joined(separator: " ")
		}
	}
}

// MARK: - Input.ListItem Creation helpers

public extension Input.ListItem {
	/// A message input to the model with a role indicating instruction following hierarchy.
	///
	/// Instructions given with the `developer` or `system` role take precedence over instructions given with the `user` role.
	///
	/// Messages with the `assistant` role are presumed to have been generated by the model in previous interactions.
	/// - Parameter role: The role of the message input.
	/// - Parameter content: Text, image, or audio input to the model, used to generate a response. Can also contain previous assistant responses.
	static func message(role: Message.Role = .user, content: Input.Content) -> Self {
		.message(Message.Input(role: role, content: content))
	}

	/// A message input to the model with a role indicating instruction following hierarchy.
	///
	/// Instructions given with the `Developer` or `System` role take precedence over instructions given with the `User` role.
	/// - Parameter role: The role of the message input.
	/// - Parameter content: Text, image, or audio input to the model, used to generate a response. Can also contain previous assistant responses.
	/// - Parameter status: The status of the message. Populated when the message is returned via API.
	static func inputMessage(role: Message.Role = .user, content: Input.Content, status: Message.Status? = nil) -> Self {
		.item(Item.Input.inputMessage(Message.Input(role: role, content: content, status: status)))
	}

	/// An output message from the model.
	/// - Parameter content: The content of the output message.
	/// - Parameter id: The unique ID of the output message.
	/// - Parameter role: The role of the output message. Always `assistant`.
	/// - Parameter status: The status of the message output.
	static func outputMessage(content: [Item.Output.Content], id: String, role: Message.Role = .assistant, status: Message.Status) -> Self {
		.item(Item.Input.outputMessage(Message.Output(content: content, id: id, role: role, status: status)))
	}

	/// The results of a file search tool call.
	///
	/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
	/// - Parameter id: The unique ID of the file search tool call.
	/// - Parameter queries: The queries used to search for files.
	/// - Parameter status: The status of the file search tool call.
	/// - Parameter results: The results of the file search tool call.
	static func fileSearch(id: String, queries: [String] = [], status: Item.FileSearchCall.Status, results: [Item.FileSearchCall.Result]? = nil) -> Self {
		.item(Item.Input.fileSearch(Item.FileSearchCall(id: id, queries: queries, status: status, results: results)))
	}

	/// A tool call to a computer use tool.
	///
	/// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
	/// - Parameter action:The action to execute.
	/// - Parameter callId: The unique ID of the computer call.
	/// - Parameter pendingSafetyChecks: The pending safety checks for the computer call.
	/// - Parameter status: The status of the item.
	static func computerToolCall(
		action: Item.ComputerToolCall.Action,
		callId: String,
		pendingSafetyChecks: [Item.ComputerToolCall.SafetyCheck] = [],
		status: Item.ComputerToolCall.Status
	) -> Self {
		.item(Item.Input.computerToolCall(Item.ComputerToolCall(
			action: action, callId: callId, pendingSafetyChecks: pendingSafetyChecks, status: status
		)))
	}

	/// The output of a computer tool call.
	///
	/// - Parameter id: The ID of the computer tool call output. Populated when this item is returned via API.
	/// - Parameter status: The status of the item. Populated when items are returned via API.
	/// - Parameter callId: The ID of the computer tool call that produced the output.
	/// - Parameter output: A computer screenshot image used with the computer use tool.
	/// - Parameter acknowledgedSafetyChecks: The safety checks reported by the API that have been acknowledged by the developer.
	static func computerToolCallOutput(
		id: String? = nil,
		status: Item.ComputerToolCall.Status? = nil,
		callId: String,
		output: Item.ComputerToolCallOutput.Output,
		acknowledgedSafetyChecks: [Item.ComputerToolCall.SafetyCheck]? = nil
	) -> Self {
		.item(Item.Input.computerToolCallOutput(Item.ComputerToolCallOutput(
			id: id, status: status, callId: callId, output: output, acknowledgedSafetyChecks: acknowledgedSafetyChecks
		)))
	}

	/// A tool call to run a web search.
	///
	/// See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
	/// - Parameter id: The unique ID of the web search tool call.
	/// - Parameter status: The status of the web search tool call.
	/// - Parameter action: An object describing the specific action taken in this web search call.
	static func webSearchCall(id: String, status: Item.WebSearchCall.Status, action: Item.WebSearchCall.Action? = nil) -> Self {
		.item(Item.Input.webSearchCall(Item.WebSearchCall(id: id, status: status, action: action)))
	}

	/// A tool call to run a function.
	///
	/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
	/// - Parameter arguments: A JSON string of the arguments to pass to the function.
	/// - Parameter callId: The unique ID of the function tool call generated by the model.
	/// - Parameter id: The unique ID of the function tool call.
	/// - Parameter name: The name of the function to run.
	/// - Parameter status: The status of the item.
	static func functionCall(arguments: String, callId: String, id: String, name: String, status: Item.FunctionCall.Status) -> Self {
		.item(Item.Input.functionCall(Item.FunctionCall(arguments: arguments, callId: callId, id: id, name: name, status: status)))
	}

	/// The output of a function tool call.
	///
	/// - Parameter id: The unique ID of the function tool call output. Populated when this item is returned via API.
	/// - Parameter status: The status of the item. Populated when items are returned via API.
	/// - Parameter callId: The ID of the computer tool call that produced the output.
	/// - Parameter output: A JSON string of the output of the function tool call.
	static func functionCallOutput(id: String? = nil, status: Item.FunctionCall.Status? = nil, callId: String, output: String) -> Self {
		.item(Item.Input.functionCallOutput(Item.FunctionCallOutput(id: id, status: status, callId: callId, output: output)))
	}

	/// A description of the chain of thought used by a reasoning model while generating a response.
	///
	/// - Parameter id: The unique identifier of the reasoning content.
	/// - Parameter summary: Reasoning text contents.
	/// - Parameter status: The status of the item. Populated when items are returned via API.
	static func reasoning(id: String, summary: [Item.Reasoning.Summary] = [], status: Item.Reasoning.Status? = nil) -> Self {
		.item(Item.Input.reasoning(Item.Reasoning(id: id, summary: summary, status: status)))
	}
}
