import Foundation
import MetaCodable

/// An item representing part of the context for the response to be generated by the model.
///
/// Can contain text, images, and audio inputs, as well as previous assistant responses and tool call outputs.
public enum Item: Equatable, Hashable, Sendable {
	/// An item representing part of the context for the response to be generated by the model.
	///
	/// Can contain text, images, and audio inputs, as well as previous assistant responses and tool call outputs.
	@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Input: Equatable, Hashable, Sendable {
		/// A message input to the model with a role indicating instruction following hierarchy.
		///
		/// Instructions given with the `Developer` or `System` role take precedence over instructions given with the `User` role.
		@CodedAs("message")
		case inputMessage(Message.Input)

		/// An output message from the model.
		@CodedAs("message")
		case outputMessage(Message.Output)

		/// The results of a file search tool call.
		///
		/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
		@CodedAs("file_search_call")
		case fileSearch(Item.FileSearchCall)

		/// A tool call to a computer use tool.
		///
		/// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
		@CodedAs("computer_call")
		case computerToolCall(Item.ComputerToolCall)

		/// The output of a computer tool call.
		@CodedAs("computer_call_output")
		case computerToolCallOutput(Item.ComputerToolCallOutput)

		/// A tool call to run a web search.
		///
		/// See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
		@CodedAs("web_search_call")
		case webSearchCall(Item.WebSearchCall)

		/// A tool call to run a function.
		///
		/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
		case functionCall(Item.FunctionCall)

		/// The output of a function tool call.
		@CodedAs("function_call_output")
		case functionCallOutput(Item.FunctionCallOutput)

		/// A description of the chain of thought used by a reasoning model while generating a response.
		case reasoning(Item.Reasoning)

		/// The text content of the input.
		///
		/// > Note: This property does not include reasoning text.
		var text: String? {
			message?.text
		}

		/// The message this item represents, if any
		var message: Message? {
			switch self {
				case let .inputMessage(message): .input(message)
				case let .outputMessage(message): .output(message)
				default: nil
			}
		}
	}

	/// Content items generated by the model.
	@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Output: Equatable, Hashable, Sendable {
		/// The content of the output message.
		@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Content: Equatable, Hashable, Sendable {
			/// An annotation of the text output.
			@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Annotation: Equatable, Hashable, Sendable {
				/// A citation to a file.
				///
				/// - Parameter fileId: The ID of the file.
				/// - Parameter index: The index of the file in the list of files.
				@CodedAs("file_citation")
				case fileCitation(
					fileId: String,
					index: UInt
				)

				/// A citation for a web resource used to generate a model response.
				///
				/// - Parameter endIndex: The index of the last character of the URL citation in the message.
				/// - Parameter startIndex: The index of the first character of the URL citation in the message.
				/// - Parameter title: The title of the web resource.
				/// - Parameter url: The URL of the web resource.
				@CodedAs("url_citation")
				case urlCitation(
					endIndex: UInt,
					startIndex: UInt,
					title: String,
					url: String
				)

				/// A path to a file.
				/// - Parameter fileId: The ID of the file.
				/// - Parameter index: The index of the file in the list of files.
				@CodedAs("file_path")
				case filePath(
					fileId: String,
					index: UInt
				)
			}

			/// A text output from the model.
			/// - Parameter text: The text output from the model.
			/// - Parameter annotations: The annotations of the text output.
			@CodedAs("output_text")
			case text(
				text: String,
				annotations: [Annotation] = []
			)

			/// A refusal from the model.
			///
			/// - Parameter refusal: The refusal explanation from the model.
			case refusal(
				_ refusal: String
			)

			/// The text content of the output.
			///
			/// > Note: Annotations are not included when using this property.
			var text: String {
				switch self {
					case let .text(text, _):
						return text
					case let .refusal(refusal):
						return refusal
				}
			}
		}

		/// An output message from the model.
		case message(Message.Output)

		/// The results of a file search tool call. See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
		@CodedAs("file_search_call")
		case fileSearch(Item.FileSearchCall)

		/// A tool call to run a function. See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
		@CodedAs("function_call")
		case functionCall(Item.FunctionCall)

		/// The results of a web search tool call. See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
		@CodedAs("web_search_call")
		case webSearchCall(Item.WebSearchCall)

		/// A tool call to a computer use tool. See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
		@CodedAs("computer_call")
		case computerToolCall(Item.ComputerToolCall)

		/// A description of the chain of thought used by a reasoning model while generating a response.
		case reasoning(Item.Reasoning)

		/// The unique ID for this item.
		public var id: String {
			switch self {
				case let .fileSearch(call): call.id
				case let .functionCall(call): call.id
				case let .message(message): message.id
				case let .webSearchCall(call): call.id
				case let .reasoning(reasoning): reasoning.id
				case let .computerToolCall(call): call.callId
			}
		}
	}

	/// The results of a file search tool call.
	///
	/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
	public struct FileSearchCall: Equatable, Codable, Hashable, Sendable {
		/// The status of the file search tool call.
		///
		/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
		public enum Status: String, CaseIterable, Equatable, Codable, Hashable, Sendable {
			case failed
			case completed
			case searching
			case incomplete
			case inProgress = "in_progress"
		}

		/// A result of the file search tool call.
		///
		/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
		public struct Result: Equatable, Codable, Hashable, Sendable {
			/// Set of 16 key-value pairs that can be attached to an object.
			///
			/// This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.
			/// Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters, booleans, or numbers.
			public var attributes: [String: String]

			/// The unique ID of the file.
			public var file_id: String

			/// The name of the file.
			public var filename: String

			/// The relevance score of the file - a value between 0 and 1.
			public var score: Int

			/// The text that was retrieved from the file.
			public var text: String

			/// Creates a new file search result.
			///
			/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
			///
			/// - Parameter attributes: Set of 16 key-value pairs that can be attached to an object.
			/// - Parameter file_id: The unique ID of the file.
			/// - Parameter filename: The name of the file.
			/// - Parameter score: The relevance score of the file - a value between 0 and 1.
			/// - Parameter text: The text that was retrieved from the file.
			public init(attributes: [String: String] = [:], file_id: String, filename: String, score: Int, text: String) {
				self.text = text
				self.score = score
				self.file_id = file_id
				self.filename = filename
				self.attributes = attributes
			}
		}

		/// The unique ID of the file search tool call.
		public var id: String

		/// The queries used to search for files.
		public var queries: [String]

		/// The status of the file search tool call.
		public var status: Status

		/// The results of the file search tool call.
		public var results: [Result]?

		/// Creates a new file search call.
		///
		/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
		/// - Parameter id: The unique ID of the file search tool call.
		/// - Parameter queries: The queries used to search for files.
		/// - Parameter status: The status of the file search tool call.
		/// - Parameter results: The results of the file search tool call.
		public init(id: String, queries: [String] = [], status: Status, results: [Result]? = nil) {
			self.id = id
			self.status = status
			self.queries = queries
			self.results = results
		}
	}

	/// A tool call to run a function.
	///
	/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
	@Codable @CodingKeys(.snake_case) public struct FunctionCall: Equatable, Hashable, Sendable {
		/// The status of the function call.
		///
		/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
		public enum Status: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
			case completed
			case incomplete
			case inProgress = "in_progress"
		}

		/// A JSON string of the arguments to pass to the function.
		public var arguments: String

		/// The unique ID of the function tool call generated by the model.
		public var callId: String

		/// The unique ID of the function tool call.
		public var id: String

		/// The name of the function to run.
		public var name: String

		/// The status of the item.
		public var status: Status

		/// Creates a new function call.
		///
		/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
		/// - Parameter arguments: A JSON string of the arguments to pass to the function.
		/// - Parameter callId: The unique ID of the function tool call generated by the model.
		/// - Parameter id: The unique ID of the function tool call.
		/// - Parameter name: The name of the function to run.
		/// - Parameter status: The status of the item.
		public init(arguments: String, callId: String, id: String, name: String, status: Status) {
			self.id = id
			self.name = name
			self.status = status
			self.callId = callId
			self.arguments = arguments
		}
	}

	/// The output of a function call.
	///
	/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
	@Codable @CodingKeys(.snake_case) public struct FunctionCallOutput: Equatable, Hashable, Sendable {
		/// The unique ID of the function tool call output. Populated when this item is returned via API.
		public var id: String?

		/// The status of the item. Populated when items are returned via API.
		public var status: Item.FunctionCall.Status?

		/// The ID of the computer tool call that produced the output.
		public var callId: String

		/// A JSON string of the output of the function tool call.
		public var output: String

		/// Creates a new function call output.
		///
		/// - Parameter id: The unique ID of the function tool call output. Populated when this item is returned via API.
		/// - Parameter status: The status of the item. Populated when items are returned via API.
		/// - Parameter callId: The ID of the computer tool call that produced the output.
		/// - Parameter output: A JSON string of the output of the function tool call.
		public init(id: String? = nil, status: FunctionCall.Status? = nil, callId: String, output: String) {
			self.id = id
			self.status = status
			self.callId = callId
			self.output = output
		}
	}

	/// A tool call to run a web search.
	///
	/// See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
	public struct WebSearchCall: Equatable, Codable, Hashable, Sendable {
		/// The status of the web search tool call.
		public enum Status: String, CaseIterable, Equatable, Codable, Hashable, Sendable {
			case completed
			case searching
			case inProgress = "in_progress"
		}

		/// The unique ID of the web search tool call.
		public var id: String

		/// The status of the web search tool call.
		public var status: Status

		/// Creates a new web search call.
		///
		/// - Parameter id: The unique ID of the web search tool call.
		/// - Parameter status: The status of the web search tool call
		public init(id: String, status: Status) {
			self.id = id
			self.status = status
		}
	}

	/// A tool call to run a computer action.
	///
	/// See the [computer action guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
	@Codable @CodingKeys(.snake_case) public struct ComputerToolCall: Equatable, Hashable, Sendable {
		/// The action of the computer call.
		///
		/// See the [computer action guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
		@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Action: Equatable, Hashable, Sendable {
			/// A click action.
			///
			/// - Parameter button: Indicates which mouse button was pressed during the click.
			/// - Parameter x: The x-coordinate where the click occurred.
			/// - Parameter y: The y-coordinate where the click occurred.
			case click(
				button: Item.ComputerToolCall.ClickButton,
				x: UInt,
				y: UInt
			)

			/// A double click action.
			///
			/// - Parameter x: The x-coordinate where the double click occurred.
			/// - Parameter y: The y-coordinate where the double click occurred.
			case doubleClick(
				x: UInt,
				y: UInt
			)

			/// A drag action.
			///
			/// - Parameter path: An array of coordinates representing the path of the drag action.
			case drag(
				path: [Item.ComputerToolCall.DragCoordinate]
			)

			/// A key press action.
			///
			/// - Parameter keys: The combination of keys the model is requesting to be pressed.
			@CodedAs("keypress")
			case keyPress(
				keys: [String]
			)

			/// A mouse move action.
			///
			/// - Parameter x: The x-coordinate to move to.
			/// - Parameter y: The y-coordinate to move to.
			case move(
				x: UInt,
				y: UInt
			)

			/// A screenshot action.
			case screenshot

			/// A scroll action.
			///
			/// - Parameter scroll_x: The horizontal scroll distance.
			/// - Parameter scroll_y: The vertical scroll distance.
			/// - Parameter x: The x-coordinate where the scroll occurred.
			/// - Parameter y: The y-coordinate where the scroll occurred.
			case scroll(
				scroll_x: UInt,
				scroll_y: UInt,
				x: UInt,
				y: UInt
			)

			/// An action to type in text.
			///
			/// - Parameter text: The text to type.
			case type(
				text: String
			)

			/// A wait action.
			case wait

			/// No action specified.
			///
			/// > Note: This action is not part of the official API. An invalid action gets returned in some cases when streaming back responses, so this catches it.
			case none
		}

		/// Indicates which mouse button was pressed during the click.
		public enum ClickButton: CaseIterable, Equatable, Hashable, Codable, Sendable {
			case left
			case right
			case wheel
			case back
			case forward
		}

		/// Represents a coordinate in a drag action.
		public struct DragCoordinate: Equatable, Hashable, Codable, Sendable {
			/// The x-coordinate of the drag action.
			public var x: UInt

			/// The y-coordinate of the drag action.
			public var y: UInt

			/// Creates a new drag coordinate.
			///
			/// - Parameter x: The x-coordinate of the drag action.
			/// - Parameter y: The y-coordinate of the drag action.
			public init(x: UInt, y: UInt) {
				self.x = x
				self.y = y
			}
		}

		/// Represents a pending safety check for a computer use call.
		public struct SafetyCheck: Equatable, Hashable, Codable, Sendable {
			/// The type of the safety check.
			public var code: String

			/// The ID of the safety check.
			public var id: String

			/// Details about the safety check.
			public var message: String

			/// Creates a new safety check.
			/// - Parameter code: The type of the safety check.
			/// - Parameter id: The ID of the safety check.
			/// - Parameter message: Details about the safety check.
			public init(code: String, id: String, message: String) {
				self.id = id
				self.code = code
				self.message = message
			}
		}

		/// The status of the computer use call.
		///
		/// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
		public enum Status: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
			case completed
			case incomplete
			case inProgress = "in_progress"
		}

		/// The action to execute.
		@Default(Action.none)
		public var action: Action

		/// The unique ID of the computer call.
		public var callId: String

		/// The pending safety checks for the computer call.
		public var pendingSafetyChecks: [SafetyCheck]

		/// The status of the item.
		public var status: Status

		/// Creates a new computer tool call.
		///
		/// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
		/// - Parameter action:The action to execute.
		/// - Parameter callId: The unique ID of the computer call.
		/// - Parameter pendingSafetyChecks: The pending safety checks for the computer call.
		/// - Parameter status: The status of the item.
		public init(action: Action, callId: String, pendingSafetyChecks: [SafetyCheck] = [], status: Status) {
			self.action = action
			self.callId = callId
			self.status = status
			self.pendingSafetyChecks = pendingSafetyChecks
		}
	}

	/// The output of a computer use call.
	@Codable @CodingKeys(.snake_case) public struct ComputerToolCallOutput: Equatable, Hashable, Sendable {
		/// A computer screenshot image used with the computer use tool.
		@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Output: Equatable, Hashable, Sendable {
			/// A computer screenshot image used with the computer use tool.
			/// - Parameter fileId: The identifier of an uploaded file that contains the screenshot.
			/// - Parameter imageUrl: The URL of the screenshot image.
			@CodedAs("computer_screenshot")
			case screenshot(
				fileId: String?,
				imageUrl: String?
			)
		}

		/// The ID of the computer tool call output. Populated when this item is returned via API.
		public var id: String?

		/// The status of the item. Populated when items are returned via API.
		public var status: Item.ComputerToolCall.Status?

		/// The ID of the computer tool call that produced the output.
		public var callId: String

		/// A computer screenshot image used with the computer use tool.
		public var output: Output

		/// The safety checks reported by the API that have been acknowledged by the developer.
		public var acknowledgedSafetyChecks: [Item.ComputerToolCall.SafetyCheck]?

		/// Creates a new computer tool call output.
		///
		/// - Parameter id: The ID of the computer tool call output. Populated when this item is returned via API.
		/// - Parameter status: The status of the item. Populated when items are returned via API.
		/// - Parameter callId: The ID of the computer tool call that produced the output.
		/// - Parameter output: A computer screenshot image used with the computer use tool.
		/// - Parameter acknowledgedSafetyChecks: The safety checks reported by the API that have been acknowledged by the developer.
		public init(
			id: String? = nil,
			status: ComputerToolCall.Status? = nil,
			callId: String,
			output: Output,
			acknowledgedSafetyChecks: [ComputerToolCall.SafetyCheck]? = nil
		) {
			self.id = id
			self.status = status
			self.output = output
			self.callId = callId
			self.acknowledgedSafetyChecks = acknowledgedSafetyChecks
		}
	}

	/// A description of the chain of thought used by a reasoning model while generating a response.
	public struct Reasoning: Equatable, Hashable, Codable, Sendable {
		/// Reasoning text contents.
		@Codable @CodedAt("type") public enum Summary: Equatable, Hashable, Sendable {
			/// A short summary of the reasoning used by the model when generating the response.
			@CodedAs("summary_text")
			case text(_ text: String)
		}

		/// The status of the reasoning data.
		public enum Status: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
			case completed
			case incomplete
			case inProgress = "in_progress"
		}

		/// The unique identifier of the reasoning content.
		public var id: String

		/// Reasoning text contents.
		public var summary: [Summary]

		/// The status of the item. Populated when items are returned via API.
		public var status: Status?

		/// Creates a new reasoning item.
		///
		/// - Parameter id: The unique identifier of the reasoning content.
		/// - Parameter summary: Reasoning text contents.
		/// - Parameter status: The status of the item. Populated when items are returned via API.
		public init(id: String, summary: [Summary] = [], status: Status? = nil) {
			self.id = id
			self.status = status
			self.summary = summary
		}
	}

	case input(Input)
	case output(Output)
}

// MARK: - Item.Input Creating helpers

public extension Item.Input {
	/// A message input to the model with a role indicating instruction following hierarchy.
	///
	/// Instructions given with the `Developer` or `System` role take precedence over instructions given with the `User` role.
	/// - Parameter role: The role of the message input.
	/// - Parameter content: Text, image, or audio input to the model, used to generate a response. Can also contain previous assistant responses.
	/// - Parameter status: The status of the message. Populated when the message is returned via API.
	static func inputMessage(role: Message.Role = .user, content: Input.Content, status: Message.Status? = nil) -> Self {
		.inputMessage(Message.Input(role: role, content: content, status: status))
	}

	/// An output message from the model.
	/// - Parameter content: The content of the output message.
	/// - Parameter id: The unique ID of the output message.
	/// - Parameter role: The role of the output message. Always `assistant`.
	/// - Parameter status: The status of the message output.
	static func outputMessage(content: [Item.Output.Content], id: String, role: Message.Role = .assistant, status: Message.Status) -> Self {
		.outputMessage(Message.Output(content: content, id: id, role: role, status: status))
	}

	/// The results of a file search tool call.
	///
	/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
	/// - Parameter id: The unique ID of the file search tool call.
	/// - Parameter queries: The queries used to search for files.
	/// - Parameter status: The status of the file search tool call.
	/// - Parameter results: The results of the file search tool call.
	static func fileSearch(id: String, queries: [String] = [], status: Item.FileSearchCall.Status, results: [Item.FileSearchCall.Result]? = nil) -> Self {
		.fileSearch(Item.FileSearchCall(id: id, queries: queries, status: status, results: results))
	}

	/// A tool call to a computer use tool.
	///
	/// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
	/// - Parameter action:The action to execute.
	/// - Parameter callId: The unique ID of the computer call.
	/// - Parameter pendingSafetyChecks: The pending safety checks for the computer call.
	/// - Parameter status: The status of the item.
	static func computerToolCall(
		action: Item.ComputerToolCall.Action,
		callId: String,
		pendingSafetyChecks: [Item.ComputerToolCall.SafetyCheck] = [],
		status: Item.ComputerToolCall.Status
	) -> Self {
		.computerToolCall(Item.ComputerToolCall(action: action, callId: callId, pendingSafetyChecks: pendingSafetyChecks, status: status))
	}

	/// The output of a computer tool call.
	///
	/// - Parameter id: The ID of the computer tool call output. Populated when this item is returned via API.
	/// - Parameter status: The status of the item. Populated when items are returned via API.
	/// - Parameter callId: The ID of the computer tool call that produced the output.
	/// - Parameter output: A computer screenshot image used with the computer use tool.
	/// - Parameter acknowledgedSafetyChecks: The safety checks reported by the API that have been acknowledged by the developer.
	static func computerToolCallOutput(
		id: String? = nil,
		status: Item.ComputerToolCall.Status? = nil,
		callId: String,
		output: Item.ComputerToolCallOutput.Output,
		acknowledgedSafetyChecks: [Item.ComputerToolCall.SafetyCheck]? = nil
	) -> Self {
		.computerToolCallOutput(Item.ComputerToolCallOutput(id: id, status: status, callId: callId, output: output, acknowledgedSafetyChecks: acknowledgedSafetyChecks))
	}

	/// A tool call to run a web search.
	///
	/// See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
	/// - Parameter id: The unique ID of the web search tool call.
	/// - Parameter status: The status of the web search tool call.
	static func webSearchResults(id: String, status: Item.WebSearchCall.Status) -> Self {
		.webSearchCall(Item.WebSearchCall(id: id, status: status))
	}

	/// A tool call to run a function.
	///
	/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
	/// - Parameter arguments: A JSON string of the arguments to pass to the function.
	/// - Parameter callId: The unique ID of the function tool call generated by the model.
	/// - Parameter id: The unique ID of the function tool call.
	/// - Parameter name: The name of the function to run.
	/// - Parameter status: The status of the item.
	static func functionCall(arguments: String, callId: String, id: String, name: String, status: Item.FunctionCall.Status) -> Self {
		.functionCall(Item.FunctionCall(arguments: arguments, callId: callId, id: id, name: name, status: status))
	}

	/// The output of a function tool call.
	///
	/// - Parameter id: The unique ID of the function tool call output. Populated when this item is returned via API.
	/// - Parameter status: The status of the item. Populated when items are returned via API.
	/// - Parameter callId: The ID of the computer tool call that produced the output.
	/// - Parameter output: A JSON string of the output of the function tool call.
	static func functionCallOutput(id: String? = nil, status: Item.FunctionCall.Status? = nil, callId: String, output: String) -> Self {
		.functionCallOutput(Item.FunctionCallOutput(id: id, status: status, callId: callId, output: output))
	}

	/// A description of the chain of thought used by a reasoning model while generating a response.
	///
	/// - Parameter id: The unique identifier of the reasoning content.
	/// - Parameter summary: Reasoning text contents.
	/// - Parameter status: The status of the item. Populated when items are returned via API.
	static func reasoning(id: String, summary: [Item.Reasoning.Summary] = [], status: Item.Reasoning.Status? = nil) -> Self {
		.reasoning(Item.Reasoning(id: id, summary: summary, status: status))
	}
}
