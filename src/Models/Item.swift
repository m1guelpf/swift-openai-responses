import Foundation
import MetaCodable

/// An item representing part of the context for the response to be generated by the model.
///
/// Can contain text, images, and audio inputs, as well as previous assistant responses and tool call outputs.
public enum Item: Equatable, Hashable, Sendable {
	/// An item representing part of the context for the response to be generated by the model.
	///
	/// Can contain text, images, and audio inputs, as well as previous assistant responses and tool call outputs.
	@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Input: Equatable, Hashable, Sendable {
		/// A message input to the model with a role indicating instruction following hierarchy.
		///
		/// Instructions given with the `Developer` or `System` role take precedence over instructions given with the `User` role.
		@CodedAs("message")
		case inputMessage(Message.Input)

		/// An output message from the model.
		@CodedAs("message")
		case outputMessage(Message.Output)

		/// The results of a file search tool call.
		///
		/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
		@CodedAs("file_search_call")
		case fileSearch(Item.FileSearchCall)

		/// A tool call to a computer use tool.
		///
		/// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
		@CodedAs("computer_call")
		case computerToolCall(Item.ComputerToolCall)

		/// The output of a computer tool call.
		@CodedAs("computer_call_output")
		case computerToolCallOutput(Item.ComputerToolCallOutput)

		/// A tool call to run a web search.
		///
		/// See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
		@CodedAs("web_search_call")
		case webSearchCall(Item.WebSearchCall)

		/// A tool call to run a function.
		///
		/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
		@CodedAs("function_call")
		case functionCall(Item.FunctionCall)

		/// The output of a function tool call.
		@CodedAs("function_call_output")
		case functionCallOutput(Item.FunctionCallOutput)

		/// A description of the chain of thought used by a reasoning model while generating a response.
		case reasoning(Item.Reasoning)

		/// An image generation request made by the model.
		@CodedAs("image_generation_call")
		case imageGenerationCall(Item.ImageGenerationCall)

		/// A tool call to run code.
		@CodedAs("code_interpreter_call")
		case codeInterpreterCall(Item.CodeInterpreterCall)

		/// A tool call to run a command on the local shell.
		@CodedAs("local_shell_call")
		case localShellCall(Item.LocalShellCall)

		/// The output of a local shell tool call.
		@CodedAs("local_shell_call_output")
		case localShellCallOutput(Item.LocalShellCallOutput)

		/// A list of tools available on an MCP server.
		@CodedAs("mcp_list_tools")
		case mcpListTools(Item.MCPListTools)

		/// A request for human approval of a tool invocation.
		@CodedAs("mcp_approval_request")
		case mcpApprovalRequest(Item.MCPApprovalRequest)

		/// A response to an MCP approval request.
		@CodedAs("mcp_approval_response")
		case mcpApprovalResponse(Item.MCPApprovalResponse)

		/// An invocation of a tool on an MCP server.
		@CodedAs("mcp_call")
		case mcpToolCall(Item.MCPToolCall)

		/// The text content of the input.
		///
		/// > Note: This property does not include reasoning text.
		var text: String? {
			message?.text
		}

		/// The message this item represents, if any
		var message: Message? {
			switch self {
				case let .inputMessage(message): .input(message)
				case let .outputMessage(message): .output(message)
				default: nil
			}
		}
	}

	/// Content items generated by the model.
	@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Output: Equatable, Hashable, Sendable {
		/// The content of the output message.
		@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Content: Equatable, Hashable, Sendable {
			/// An annotation of the text output.
			@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Annotation: Equatable, Hashable, Sendable {
				/// A citation to a file.
				///
				/// - Parameter fileId: The ID of the file.
				/// - Parameter index: The index of the file in the list of files.
				@CodedAs("file_citation")
				case fileCitation(
					fileId: String,
					index: UInt
				)

				/// A citation for a web resource used to generate a model response.
				///
				/// - Parameter endIndex: The index of the last character of the URL citation in the message.
				/// - Parameter startIndex: The index of the first character of the URL citation in the message.
				/// - Parameter title: The title of the web resource.
				/// - Parameter url: The URL of the web resource.
				@CodedAs("url_citation")
				case urlCitation(
					endIndex: UInt,
					startIndex: UInt,
					title: String,
					url: String
				)

				/// A path to a file.
				/// - Parameter fileId: The ID of the file.
				/// - Parameter index: The index of the file in the list of files.
				@CodedAs("file_path")
				case filePath(
					fileId: String,
					index: UInt
				)
			}

			@Codable @CodingKeys(.snake_case) public struct LogProb: Equatable, Hashable, Sendable {
				public struct AlternativeLogProb: Equatable, Hashable, Codable, Sendable {
					public var bytes: [Int]
					public var logprob: Double
					public var token: String
				}

				public var bytes: [Int]
				public var token: String
				public var logprob: Double
				public var topLogprobs: [AlternativeLogProb]?
			}

			/// A text output from the model.
			/// - Parameter text: The text output from the model.
			/// - Parameter annotations: The annotations of the text output.
			@CodedAs("output_text")
			case text(
				text: String,
				annotations: [Annotation] = [],
				logprobs: [LogProb] = []
			)

			/// A refusal from the model.
			///
			/// - Parameter refusal: The refusal explanation from the model.
			case refusal(_ refusal: String)

			/// The text content of the output.
			///
			/// > Note: Annotations are not included when using this property.
			var text: String {
				switch self {
					case let .text(text, _, _):
						return text
					case let .refusal(refusal):
						return refusal
				}
			}
		}

		/// An output message from the model.
		case message(Message.Output)

		/// The results of a file search tool call. See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
		@CodedAs("file_search_call")
		case fileSearch(Item.FileSearchCall)

		/// A tool call to run a function. See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
		@CodedAs("function_call")
		case functionCall(Item.FunctionCall)

		/// The results of a web search tool call. See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
		@CodedAs("web_search_call")
		case webSearchCall(Item.WebSearchCall)

		/// A tool call to a computer use tool. See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
		@CodedAs("computer_call")
		case computerToolCall(Item.ComputerToolCall)

		/// A description of the chain of thought used by a reasoning model while generating a response.
		case reasoning(Item.Reasoning)

		/// An image generation request made by the model.
		@CodedAs("image_generation_call")
		case imageGenerationCall(Item.ImageGenerationCall)

		/// A tool call to run code.
		@CodedAs("code_interpreter_call")
		case codeInterpreterCall(Item.CodeInterpreterCall)

		/// A tool call to run a command on the local shell.
		@CodedAs("local_shell_call")
		case localShellCall(Item.LocalShellCall)

		/// An invocation of a tool on an MCP server.
		@CodedAs("mcp_call")
		case mcpToolCall(Item.MCPToolCall)

		/// A list of tools available on an MCP server.
		@CodedAs("mcp_list_tools")
		case mcpListTools(Item.MCPListTools)

		/// A request for human approval of a tool invocation.
		@CodedAs("mcp_approval_request")
		case mcpApprovalRequest(Item.MCPApprovalRequest)

		/// The unique ID for this item.
		public var id: String {
			switch self {
				case let .fileSearch(call): call.id
				case let .mcpToolCall(call): call.id
				case let .functionCall(call): call.id
				case let .message(message): message.id
				case let .webSearchCall(call): call.id
				case let .localShellCall(call): call.id
				case let .mcpListTools(tools): tools.id
				case let .reasoning(reasoning): reasoning.id
				case let .imageGenerationCall(call): call.id
				case let .codeInterpreterCall(call): call.id
				case let .computerToolCall(call): call.callId
				case let .mcpApprovalRequest(request): request.id
			}
		}
	}

	/// The results of a file search tool call.
	///
	/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
	public struct FileSearchCall: Equatable, Codable, Hashable, Sendable {
		/// The status of the file search tool call.
		///
		/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
		public enum Status: String, CaseIterable, Equatable, Codable, Hashable, Sendable {
			case failed
			case completed
			case searching
			case incomplete
			case inProgress = "in_progress"
		}

		/// A result of the file search tool call.
		///
		/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
		public struct Result: Equatable, Codable, Hashable, Sendable {
			/// Set of 16 key-value pairs that can be attached to an object.
			///
			/// This can be useful for storing additional information about the object in a structured format, and querying for objects via API or the dashboard.
			/// Keys are strings with a maximum length of 64 characters. Values are strings with a maximum length of 512 characters, booleans, or numbers.
			public var attributes: [String: String]

			/// The unique ID of the file.
			public var file_id: String

			/// The name of the file.
			public var filename: String

			/// The relevance score of the file - a value between 0 and 1.
			public var score: Int

			/// The text that was retrieved from the file.
			public var text: String

			/// Creates a new file search result.
			///
			/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
			///
			/// - Parameter attributes: Set of 16 key-value pairs that can be attached to an object.
			/// - Parameter file_id: The unique ID of the file.
			/// - Parameter filename: The name of the file.
			/// - Parameter score: The relevance score of the file - a value between 0 and 1.
			/// - Parameter text: The text that was retrieved from the file.
			public init(attributes: [String: String] = [:], file_id: String, filename: String, score: Int, text: String) {
				self.text = text
				self.score = score
				self.file_id = file_id
				self.filename = filename
				self.attributes = attributes
			}
		}

		/// The unique ID of the file search tool call.
		public var id: String

		/// The queries used to search for files.
		public var queries: [String]

		/// The status of the file search tool call.
		public var status: Status

		/// The results of the file search tool call.
		public var results: [Result]?

		/// Creates a new file search call.
		///
		/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
		/// - Parameter id: The unique ID of the file search tool call.
		/// - Parameter queries: The queries used to search for files.
		/// - Parameter status: The status of the file search tool call.
		/// - Parameter results: The results of the file search tool call.
		public init(id: String, queries: [String] = [], status: Status, results: [Result]? = nil) {
			self.id = id
			self.status = status
			self.queries = queries
			self.results = results
		}
	}

	/// A tool call to run a function.
	///
	/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
	@Codable @CodingKeys(.snake_case) public struct FunctionCall: Equatable, Hashable, Sendable {
		/// The status of the function call.
		///
		/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
		public enum Status: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
			case completed
			case incomplete
			case inProgress = "in_progress"
		}

		/// A JSON string of the arguments to pass to the function.
		public var arguments: String

		/// The unique ID of the function tool call generated by the model.
		public var callId: String

		/// The unique ID of the function tool call.
		public var id: String

		/// The name of the function to run.
		public var name: String

		/// The status of the item.
		public var status: Status

		/// Creates a new function call.
		///
		/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
		/// - Parameter arguments: A JSON string of the arguments to pass to the function.
		/// - Parameter callId: The unique ID of the function tool call generated by the model.
		/// - Parameter id: The unique ID of the function tool call.
		/// - Parameter name: The name of the function to run.
		/// - Parameter status: The status of the item.
		public init(arguments: String, callId: String, id: String, name: String, status: Status) {
			self.id = id
			self.name = name
			self.status = status
			self.callId = callId
			self.arguments = arguments
		}
	}

	/// The output of a function call.
	///
	/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
	@Codable @CodingKeys(.snake_case) public struct FunctionCallOutput: Equatable, Hashable, Sendable {
		/// The unique ID of the function tool call output. Populated when this item is returned via API.
		public var id: String?

		/// The status of the item. Populated when items are returned via API.
		public var status: Item.FunctionCall.Status?

		/// The ID of the computer tool call that produced the output.
		public var callId: String

		/// A JSON string of the output of the function tool call.
		public var output: String

		/// Creates a new function call output.
		///
		/// - Parameter id: The unique ID of the function tool call output. Populated when this item is returned via API.
		/// - Parameter status: The status of the item. Populated when items are returned via API.
		/// - Parameter callId: The ID of the computer tool call that produced the output.
		/// - Parameter output: A JSON string of the output of the function tool call.
		public init(id: String? = nil, status: FunctionCall.Status? = nil, callId: String, output: String) {
			self.id = id
			self.status = status
			self.callId = callId
			self.output = output
		}
	}

	/// A tool call to run a web search.
	///
	/// See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
	public struct WebSearchCall: Equatable, Codable, Hashable, Sendable {
		/// The status of the web search tool call.
		public enum Status: String, CaseIterable, Equatable, Codable, Hashable, Sendable {
			case completed
			case searching
			case inProgress = "in_progress"
		}

		@Codable @CodedAt("type") public enum Action: Equatable, Hashable, Sendable {
			/// Performs a web search query.
			/// - Parameter query: The search query.
			case search(query: String)

			/// Opens a specific URL from search results.
			/// - Parameter url: The URL opened by the model.
			@CodedAs("open_page")
			case openPage(url: URL)

			/// Searches for a pattern within a loaded page.
			/// - Parameter pattern: The pattern or text to search for within the page.
			/// - Parameter url: The URL of the page searched for the pattern.
			case find(pattern: String, url: URL)
		}

		/// The unique ID of the web search tool call.
		public var id: String

		/// The status of the web search tool call.
		public var status: Status

		/// An object describing the specific action taken in this web search call.
		///
		/// Includes details on how the model used the web (search, open_page, find).
		public var action: Action?

		/// Creates a new web search call.
		///
		/// - Parameter id: The unique ID of the web search tool call.
		/// - Parameter status: The status of the web search tool call
		/// - Parameter action: An object describing the specific action taken in this web search call.
		public init(id: String, status: Status, action: Action? = nil) {
			self.id = id
			self.status = status
			self.action = action
		}
	}

	/// A tool call to run a computer action.
	///
	/// See the [computer action guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
	@Codable @CodingKeys(.snake_case) public struct ComputerToolCall: Equatable, Hashable, Sendable {
		/// The action of the computer call.
		///
		/// See the [computer action guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
		@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Action: Equatable, Hashable, Sendable {
			/// A click action.
			///
			/// - Parameter button: Indicates which mouse button was pressed during the click.
			/// - Parameter x: The x-coordinate where the click occurred.
			/// - Parameter y: The y-coordinate where the click occurred.
			case click(
				button: Item.ComputerToolCall.ClickButton,
				x: UInt,
				y: UInt
			)

			/// A double click action.
			///
			/// - Parameter x: The x-coordinate where the double click occurred.
			/// - Parameter y: The y-coordinate where the double click occurred.
			case doubleClick(
				x: UInt,
				y: UInt
			)

			/// A drag action.
			///
			/// - Parameter path: An array of coordinates representing the path of the drag action.
			case drag(
				path: [Item.ComputerToolCall.DragCoordinate]
			)

			/// A key press action.
			///
			/// - Parameter keys: The combination of keys the model is requesting to be pressed.
			@CodedAs("keypress")
			case keyPress(
				keys: [String]
			)

			/// A mouse move action.
			///
			/// - Parameter x: The x-coordinate to move to.
			/// - Parameter y: The y-coordinate to move to.
			case move(
				x: UInt,
				y: UInt
			)

			/// A screenshot action.
			case screenshot

			/// A scroll action.
			///
			/// - Parameter scroll_x: The horizontal scroll distance.
			/// - Parameter scroll_y: The vertical scroll distance.
			/// - Parameter x: The x-coordinate where the scroll occurred.
			/// - Parameter y: The y-coordinate where the scroll occurred.
			case scroll(
				scroll_x: UInt,
				scroll_y: UInt,
				x: UInt,
				y: UInt
			)

			/// An action to type in text.
			///
			/// - Parameter text: The text to type.
			case type(
				text: String
			)

			/// A wait action.
			case wait

			/// No action specified.
			///
			/// > Note: This action is not part of the official API. An invalid action gets returned in some cases when streaming back responses, so this catches it.
			case none
		}

		/// Indicates which mouse button was pressed during the click.
		public enum ClickButton: CaseIterable, Equatable, Hashable, Codable, Sendable {
			case left
			case right
			case wheel
			case back
			case forward
		}

		/// Represents a coordinate in a drag action.
		public struct DragCoordinate: Equatable, Hashable, Codable, Sendable {
			/// The x-coordinate of the drag action.
			public var x: UInt

			/// The y-coordinate of the drag action.
			public var y: UInt

			/// Creates a new drag coordinate.
			///
			/// - Parameter x: The x-coordinate of the drag action.
			/// - Parameter y: The y-coordinate of the drag action.
			public init(x: UInt, y: UInt) {
				self.x = x
				self.y = y
			}
		}

		/// Represents a pending safety check for a computer use call.
		public struct SafetyCheck: Equatable, Hashable, Codable, Sendable {
			/// The type of the safety check.
			public var code: String

			/// The ID of the safety check.
			public var id: String

			/// Details about the safety check.
			public var message: String

			/// Creates a new safety check.
			/// - Parameter code: The type of the safety check.
			/// - Parameter id: The ID of the safety check.
			/// - Parameter message: Details about the safety check.
			public init(code: String, id: String, message: String) {
				self.id = id
				self.code = code
				self.message = message
			}
		}

		/// The status of the computer use call.
		///
		/// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
		public enum Status: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
			case completed
			case incomplete
			case inProgress = "in_progress"
		}

		/// The action to execute.
		@Default(Action.none)
		public var action: Action

		/// The unique ID of the computer call.
		public var callId: String

		/// The pending safety checks for the computer call.
		public var pendingSafetyChecks: [SafetyCheck]

		/// The status of the item.
		public var status: Status

		/// Creates a new computer tool call.
		///
		/// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
		/// - Parameter action:The action to execute.
		/// - Parameter callId: The unique ID of the computer call.
		/// - Parameter pendingSafetyChecks: The pending safety checks for the computer call.
		/// - Parameter status: The status of the item.
		public init(action: Action, callId: String, pendingSafetyChecks: [SafetyCheck] = [], status: Status) {
			self.action = action
			self.callId = callId
			self.status = status
			self.pendingSafetyChecks = pendingSafetyChecks
		}
	}

	/// The output of a computer use call.
	@Codable @CodingKeys(.snake_case) public struct ComputerToolCallOutput: Equatable, Hashable, Sendable {
		/// A computer screenshot image used with the computer use tool.
		@Codable @CodedAt("type") @CodingKeys(.snake_case) public enum Output: Equatable, Hashable, Sendable {
			/// A computer screenshot image used with the computer use tool.
			/// - Parameter fileId: The identifier of an uploaded file that contains the screenshot.
			/// - Parameter imageUrl: The URL of the screenshot image.
			@CodedAs("computer_screenshot")
			case screenshot(
				fileId: String?,
				imageUrl: String?
			)
		}

		/// The ID of the computer tool call output. Populated when this item is returned via API.
		public var id: String?

		/// The status of the item. Populated when items are returned via API.
		public var status: Item.ComputerToolCall.Status?

		/// The ID of the computer tool call that produced the output.
		public var callId: String

		/// A computer screenshot image used with the computer use tool.
		public var output: Output

		/// The safety checks reported by the API that have been acknowledged by the developer.
		public var acknowledgedSafetyChecks: [Item.ComputerToolCall.SafetyCheck]?

		/// Creates a new computer tool call output.
		///
		/// - Parameter id: The ID of the computer tool call output. Populated when this item is returned via API.
		/// - Parameter status: The status of the item. Populated when items are returned via API.
		/// - Parameter callId: The ID of the computer tool call that produced the output.
		/// - Parameter output: A computer screenshot image used with the computer use tool.
		/// - Parameter acknowledgedSafetyChecks: The safety checks reported by the API that have been acknowledged by the developer.
		public init(
			id: String? = nil,
			status: ComputerToolCall.Status? = nil,
			callId: String,
			output: Output,
			acknowledgedSafetyChecks: [ComputerToolCall.SafetyCheck]? = nil
		) {
			self.id = id
			self.status = status
			self.output = output
			self.callId = callId
			self.acknowledgedSafetyChecks = acknowledgedSafetyChecks
		}
	}

	/// A description of the chain of thought used by a reasoning model while generating a response.
	@Codable @CodingKeys(.snake_case) public struct Reasoning: Equatable, Hashable, Sendable {
		/// Reasoning text contents.
		@Codable @CodedAt("type") public enum Summary: Equatable, Hashable, Sendable {
			/// A short summary of the reasoning used by the model when generating the response.
			@CodedAs("summary_text")
			case text(_ text: String)

			var text: String {
				get {
					switch self {
						case let .text(text): text
					}
				}
				set {
					switch self {
						case .text: self = .text(newValue)
					}
				}
			}

			init(_ text: String) {
				self = .text(text)
			}
		}

		public struct SummaryDelta: Equatable, Hashable, Codable, Sendable {
			public var text: String
		}

		/// The status of the reasoning data.
		public enum Status: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
			case completed
			case incomplete
			case inProgress = "in_progress"
		}

		/// The unique identifier of the reasoning content.
		public var id: String

		/// Reasoning text contents.
		public var summary: [Summary]

		/// The status of the item. Populated when items are returned via API.
		public var status: Status?

		/// The encrypted content of the reasoning item.
		public var encryptedContent: String?

		/// Creates a new reasoning item.
		///
		/// - Parameter id: The unique identifier of the reasoning content.
		/// - Parameter summary: Reasoning text contents.
		/// - Parameter status: The status of the item. Populated when items are returned via API.
		/// - Parameter encryptedContent: The encrypted content of the reasoning item.
		public init(id: String, summary: [Summary] = [], status: Status? = nil, encryptedContent: String? = nil) {
			self.id = id
			self.status = status
			self.summary = summary
			self.encryptedContent = encryptedContent
		}
	}

	/// An image generation request made by the model.
	public struct ImageGenerationCall: Equatable, Hashable, Sendable {
		public enum Status: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
			case inProgress = "in_progress"
			case completed, generating, failed
		}

		/// The unique ID of the image generation call.
		public var id: String

		/// The generated image encoded in base64.
		public var result: Data?

		/// Partial image generations
		///
		/// > Warning: This field is never populated by the API. It is only available when streaming image generations using the `Conversation` class.
		public var partialImages: [Data]?

		/// The status of the image generation call.
		public var status: Status

		/// Creates a new image generation call.
		///
		/// - Parameter id: The unique ID of the image generation call.
		/// - Parameter result: The generated image encoded in base64, or null if not available.
		/// - Parameter status: The status of the image generation call.
		public init(id: String, result: Data? = nil, status: Status, partialImages: [Data]? = nil) {
			self.id = id
			self.result = result
			self.status = status
			self.partialImages = partialImages
		}
	}

	/// A tool call to run code.
	@Codable @CodingKeys(.snake_case) public struct CodeInterpreterCall: Equatable, Hashable, Sendable {
		public enum Status: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
			case completed, incomplete, interpreting, failed
			case inProgress = "in_progress"
		}

		/// The outputs generated by the code interpreter, such as logs or images.
		@Codable @CodedAt("type") public enum Output: Equatable, Hashable, Sendable {
			/// The logs output from the code interpreter.
			/// - Parameter logs: The logs output from the code interpreter.
			case logs(_ logs: String)

			/// The image output from the code interpreter.
			/// - Parameter url: The URL of the image output from the code interpreter.
			case image(_ url: URL)
		}

		/// The unique ID of the code interpreter tool call.
		public var id: String

		/// The ID of the container used to run the code.
		public var containerId: String

		/// The code to run, or null if not available.
		public var code: String?

		/// The status of the code interpreter tool call.
		public var status: Status

		/// The outputs generated by the code interpreter, such as logs or images.
		public var outputs: [Output]?

		/// Creates a new code interpreter tool call.
		///
		/// - Parameter id: The unique ID of the code interpreter tool call.
		/// - Parameter containerId: The ID of the container used to run the code.
		/// - Parameter code: The code to run, or null if not available.
		/// - Parameter status: The status of the code interpreter tool call.
		/// - Parameter outputs: The outputs generated by the code interpreter, such as logs or images.
		public init(id: String, containerId: String, code: String? = nil, status: Status, outputs: [Output]? = nil) {
			self.id = id
			self.code = code
			self.status = status
			self.outputs = outputs
			self.containerId = containerId
		}
	}

	@Codable @CodingKeys(.snake_case) public struct LocalShellCall: Equatable, Hashable, Sendable {
		public enum Status: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
			case completed, incomplete
			case inProgress = "in_progress"
		}

		@Codable public struct Action: Equatable, Hashable, Sendable {
			/// The command to run.
			public var command: [String]

			/// Environment variables to set for the command.
			public var env: [String: String]?

			/// Optional timeout in milliseconds for the command.
			@CodedAt("timeout_ms") public var timeout: TimeInterval?

			/// Optional user to run the command as.
			public var user: String?

			/// Optional working directory to run the command in.
			public var workingDirectory: String?

			/// Creates a new action to run a shell command.
			///
			/// - Parameter command: The command to run.
			/// - Parameter env: Environment variables to set for the command.
			/// - Parameter timeout: Optional timeout in milliseconds for the command.
			/// - Parameter user: Optional user to run the command as.
			/// - Parameter workingDirectory: Optional working directory to run the command in.
			public init(command: [String], env: [String: String]? = nil, timeout: TimeInterval? = nil, user: String? = nil, workingDirectory: String? = nil) {
				self.env = env
				self.user = user
				self.command = command
				self.timeout = timeout
				self.workingDirectory = workingDirectory
			}
		}

		/// The unique ID of the local shell call.
		public var id: String

		/// The unique ID of the local shell tool call generated by the model.
		public var callId: String

		/// The status of the local shell call.
		public var status: Status

		/// Execute a shell command on the server.
		public var action: Action

		/// Creates a new local shell call.
		///
		/// - Parameter id: The unique ID of the local shell call.
		/// - Parameter callId: The unique ID of the local shell tool call generated by the model.
		/// - Parameter status: The status of the local shell call.
		/// - Parameter action: Execute a shell command on the server.
		public init(id: String, callId: String, status: Status, action: Action) {
			self.id = id
			self.callId = callId
			self.status = status
			self.action = action
		}
	}

	/// The output of a local shell tool call.
	@Codable @CodingKeys(.snake_case) public struct LocalShellCallOutput: Equatable, Hashable, Sendable {
		/// The status of the item.
		public enum Status: String, CaseIterable, Equatable, Hashable, Codable, Sendable {
			case completed, incomplete
			case inProgress = "in_progress"
		}

		/// The unique ID of the local shell tool call generated by the model.
		public var id: String

		/// The status of the item.
		public var status: Status?

		/// A JSON string of the output of the local shell tool call.
		public var output: String

		/// Creates a new local shell tool call output.
		///
		/// - Parameter id: The unique ID of the local shell tool call generated by the model.
		/// - Parameter status: The status of the item.
		/// - Parameter output: A JSON string of the output of the local shell tool call.
		public init(id: String, status: Status? = nil, output: String) {
			self.id = id
			self.status = status
			self.output = output
		}
	}

	@Codable public struct MCPToolCall: Equatable, Hashable, Sendable {
		/// The unique ID of the tool call.
		public var id: String

		/// The label of the MCP server running the tool.
		@CodedAs("server_label") public var server: String

		/// The name of the tool that was run.
		public var name: String

		/// A JSON string of the arguments passed to the tool.
		public var arguments: String

		/// The output from the tool call.
		public var output: String?

		/// The error from the tool call, if any.
		public var error: String?

		/// Creates a new MCP tool call.
		///
		/// - Parameter id: The unique ID of the tool call.
		/// - Parameter server: The label of the MCP server running the tool.
		/// - Parameter name: The name of the tool that was run.
		/// - Parameter arguments: A JSON string of the arguments passed to the tool.
		/// - Parameter output: The output from the tool call.
		/// - Parameter error: The error from the tool call, if any.
		public init(id: String, server: String, name: String, arguments: String, output: String? = nil, error: String? = nil) {
			self.id = id
			self.name = name
			self.error = error
			self.server = server
			self.output = output
			self.arguments = arguments
		}
	}

	@Codable public struct MCPListTools: Equatable, Hashable, Sendable {
		@Codable @CodingKeys(.snake_case) public struct MCPTool: Equatable, Hashable, Sendable {
			/// Additional annotations about the tool.
			public struct Annotations: Equatable, Hashable, Codable, Sendable {
				/// A human-readable title for the tool
				public var title: String?

				/// If true, the tool may perform destructive updates to its environment.
				/// If false, the tool performs only additive updates.
				public var destructiveHint: Bool?

				/// If true, calling the tool repeatedly with the same arguments will have no additional effect on its environment.
				public var idempotentHint: Bool?

				/// If true, this tool may interact with an "open world" of external
				/// entities. If false, the tool's domain of interaction is closed.
				/// For example, the world of a web search tool is open, whereas that
				/// of a memory tool is not.
				public var openWorldHint: Bool?

				/// If true, the tool does not modify its environment.
				public var readOnlyHint: Bool?

				/// Creates a new set of annotations for a tool.
				///
				/// - Parameter title: A human-readable title for the tool.
				/// - Parameter destructiveHint: If true, the tool may perform destructive updates to its environment.
				/// - Parameter idempotentHint: If true, calling the tool repeatedly with the same arguments will have no additional effect on its environment.
				/// - Parameter openWorldHint: If true, this tool may interact with an "open world" of external entities.
				/// - Parameter readOnlyHint: If true, the tool does not modify its environment.
				public init(title: String? = nil, destructiveHint: Bool? = nil, idempotentHint: Bool? = nil, openWorldHint: Bool? = nil, readOnlyHint: Bool? = nil) {
					self.title = title
					self.readOnlyHint = readOnlyHint
					self.openWorldHint = openWorldHint
					self.idempotentHint = idempotentHint
					self.destructiveHint = destructiveHint
				}
			}

			/// The name of the tool.
			public var name: String

			/// The description of the tool.
			public var description: String?

			/// The JSON schema describing the tool's input.
			public var inputSchema: Tool.Function.Parameters

			/// Additional annotations about the tool.
			public var annotations: Annotations?

			/// Creates a new MCP tool.
			///
			/// - Parameter name: The name of the tool.
			/// - Parameter description: The description of the tool.
			/// - Parameter inputSchema: The JSON schema describing the tool's input.
			/// - Parameter annotations: Additional annotations about the tool.
			public init(name: String, description: String? = nil, inputSchema: Tool.Function.Parameters, annotations: Annotations? = nil) {
				self.name = name
				self.description = description
				self.inputSchema = inputSchema
				self.annotations = annotations
			}
		}

		/// The unique ID of the list.
		public var id: String

		/// The label of the MCP server.
		@CodedAs("server_label") public var server: String

		/// The tools available on the server.
		public var tools: [MCPTool]

		/// Error message if the server could not list tools.
		public var error: String?

		/// Creates a new MCP list tools item.
		///
		/// - Parameter id: The unique ID of the list.
		/// - Parameter server: The label of the MCP server.
		/// - Parameter tools: The tools available on the server.
		/// - Parameter error: Error message if the server could not list tools.
		public init(id: String, server: String, tools: [MCPTool], error: String? = nil) {
			self.id = id
			self.tools = tools
			self.error = error
			self.server = server
		}
	}

	@Codable public struct MCPApprovalRequest: Equatable, Hashable, Sendable {
		/// The unique ID of the approval request.
		public var id: String

		/// The label of the MCP server making the request.
		@CodedAs("server_label") public var server: String

		/// The name of the tool to run.
		public var name: String

		/// A JSON string of arguments for the tool.
		public var arguments: String

		/// Creates a new MCP approval request.
		///
		/// - Parameter id: The unique ID of the approval request.
		/// - Parameter server: The label of the MCP server making the request.
		/// - Parameter name: The name of the tool to run.
		/// - Parameter arguments: A JSON string of arguments for the tool.
		public init(id: String, server: String, name: String, arguments: String) {
			self.id = id
			self.name = name
			self.server = server
			self.arguments = arguments
		}
	}

	@Codable @CodingKeys(.snake_case) public struct MCPApprovalResponse: Equatable, Hashable, Sendable {
		/// The unique ID of the approval response
		public var id: String?

		/// The ID of the approval request being answered.
		public var approvalRequestId: String

		/// Whether the request was approved.
		public var approve: Bool

		/// Optional reason for the decision.
		public var reason: String?

		/// Creates a new MCP approval response.
		///
		/// - Parameter id: The unique ID of the approval response.
		/// - Parameter approvalRequestId: The ID of the approval request being answered.
		/// - Parameter approve: Whether the request was approved.
		/// - Parameter reason: Optional reason for the decision.
		public init(id: String? = nil, approvalRequestId: String, approve: Bool, reason: String? = nil) {
			self.id = id
			self.reason = reason
			self.approve = approve
			self.approvalRequestId = approvalRequestId
		}
	}

	case input(Input)
	case output(Output)
}

// MARK: - Item.Input Creating helpers

public extension Item.Input {
	/// A message input to the model with a role indicating instruction following hierarchy.
	///
	/// Instructions given with the `Developer` or `System` role take precedence over instructions given with the `User` role.
	/// - Parameter role: The role of the message input.
	/// - Parameter content: Text, image, or audio input to the model, used to generate a response. Can also contain previous assistant responses.
	/// - Parameter status: The status of the message. Populated when the message is returned via API.
	static func inputMessage(role: Message.Role = .user, content: Input.Content, status: Message.Status? = nil) -> Self {
		.inputMessage(Message.Input(role: role, content: content, status: status))
	}

	/// An output message from the model.
	/// - Parameter content: The content of the output message.
	/// - Parameter id: The unique ID of the output message.
	/// - Parameter role: The role of the output message. Always `assistant`.
	/// - Parameter status: The status of the message output.
	static func outputMessage(content: [Item.Output.Content], id: String, role: Message.Role = .assistant, status: Message.Status) -> Self {
		.outputMessage(Message.Output(content: content, id: id, role: role, status: status))
	}

	/// The results of a file search tool call.
	///
	/// See the [file search guide](https://platform.openai.com/docs/guides/tools-file-search) for more information.
	/// - Parameter id: The unique ID of the file search tool call.
	/// - Parameter queries: The queries used to search for files.
	/// - Parameter status: The status of the file search tool call.
	/// - Parameter results: The results of the file search tool call.
	static func fileSearch(id: String, queries: [String] = [], status: Item.FileSearchCall.Status, results: [Item.FileSearchCall.Result]? = nil) -> Self {
		.fileSearch(Item.FileSearchCall(id: id, queries: queries, status: status, results: results))
	}

	/// A tool call to a computer use tool.
	///
	/// See the [computer use guide](https://platform.openai.com/docs/guides/tools-computer-use) for more information.
	/// - Parameter action:The action to execute.
	/// - Parameter callId: The unique ID of the computer call.
	/// - Parameter pendingSafetyChecks: The pending safety checks for the computer call.
	/// - Parameter status: The status of the item.
	static func computerToolCall(
		action: Item.ComputerToolCall.Action,
		callId: String,
		pendingSafetyChecks: [Item.ComputerToolCall.SafetyCheck] = [],
		status: Item.ComputerToolCall.Status
	) -> Self {
		.computerToolCall(Item.ComputerToolCall(action: action, callId: callId, pendingSafetyChecks: pendingSafetyChecks, status: status))
	}

	/// The output of a computer tool call.
	///
	/// - Parameter id: The ID of the computer tool call output. Populated when this item is returned via API.
	/// - Parameter status: The status of the item. Populated when items are returned via API.
	/// - Parameter callId: The ID of the computer tool call that produced the output.
	/// - Parameter output: A computer screenshot image used with the computer use tool.
	/// - Parameter acknowledgedSafetyChecks: The safety checks reported by the API that have been acknowledged by the developer.
	static func computerToolCallOutput(
		id: String? = nil,
		status: Item.ComputerToolCall.Status? = nil,
		callId: String,
		output: Item.ComputerToolCallOutput.Output,
		acknowledgedSafetyChecks: [Item.ComputerToolCall.SafetyCheck]? = nil
	) -> Self {
		.computerToolCallOutput(Item.ComputerToolCallOutput(id: id, status: status, callId: callId, output: output, acknowledgedSafetyChecks: acknowledgedSafetyChecks))
	}

	/// A tool call to run a web search.
	///
	/// See the [web search guide](https://platform.openai.com/docs/guides/tools-web-search) for more information.
	/// - Parameter id: The unique ID of the web search tool call.
	/// - Parameter status: The status of the web search tool call.
	/// - Parameter action: An object describing the specific action taken in this web search call.
	static func webSearchResults(id: String, status: Item.WebSearchCall.Status, action: Item.WebSearchCall.Action? = nil) -> Self {
		.webSearchCall(Item.WebSearchCall(id: id, status: status, action: action))
	}

	/// A tool call to run a function.
	///
	/// See the [function calling guide](https://platform.openai.com/docs/guides/function-calling) for more information.
	/// - Parameter arguments: A JSON string of the arguments to pass to the function.
	/// - Parameter callId: The unique ID of the function tool call generated by the model.
	/// - Parameter id: The unique ID of the function tool call.
	/// - Parameter name: The name of the function to run.
	/// - Parameter status: The status of the item.
	static func functionCall(arguments: String, callId: String, id: String, name: String, status: Item.FunctionCall.Status) -> Self {
		.functionCall(Item.FunctionCall(arguments: arguments, callId: callId, id: id, name: name, status: status))
	}

	/// The output of a function tool call.
	///
	/// - Parameter id: The unique ID of the function tool call output. Populated when this item is returned via API.
	/// - Parameter status: The status of the item. Populated when items are returned via API.
	/// - Parameter callId: The ID of the computer tool call that produced the output.
	/// - Parameter output: A JSON string of the output of the function tool call.
	static func functionCallOutput(id: String? = nil, status: Item.FunctionCall.Status? = nil, callId: String, output: String) -> Self {
		.functionCallOutput(Item.FunctionCallOutput(id: id, status: status, callId: callId, output: output))
	}

	/// A description of the chain of thought used by a reasoning model while generating a response.
	///
	/// - Parameter id: The unique identifier of the reasoning content.
	/// - Parameter summary: Reasoning text contents.
	/// - Parameter status: The status of the item. Populated when items are returned via API.
	static func reasoning(id: String, summary: [Item.Reasoning.Summary] = [], status: Item.Reasoning.Status? = nil) -> Self {
		.reasoning(Item.Reasoning(id: id, summary: summary, status: status))
	}

	/// An image generation request made by the model.
	///
	/// - Parameter id: The unique ID of the image generation call.
	/// - Parameter result: The generated image, or null if not available.
	/// - Parameter status: The status of the image generation call.
	static func imageGenerationCall(id: String, result: Data? = nil, status: Item.ImageGenerationCall.Status) -> Self {
		.imageGenerationCall(Item.ImageGenerationCall(id: id, result: result, status: status))
	}

	/// A tool call to run code.
	///
	/// See the [code interpreter guide](https://platform.openai.com/docs/guides/tools-code-interpreter) for more information.
	/// - Parameter id: The unique ID of the code interpreter tool call.
	/// - Parameter containerId: The ID of the container used to run the code.
	/// - Parameter code: The code to run, or null if not available.
	/// - Parameter status: The status of the code interpreter tool call.
	/// - Parameter outputs: The outputs generated by the code interpreter, such as logs or images.
	static func codeInterpreterCall(id: String, containerId: String, code: String? = nil, status: Item.CodeInterpreterCall.Status, outputs: [Item.CodeInterpreterCall.Output]? = nil) -> Self {
		.codeInterpreterCall(Item.CodeInterpreterCall(id: id, containerId: containerId, code: code, status: status, outputs: outputs))
	}

	/// A tool call to run a command on the local shell.
	///
	/// - Parameter id: The unique ID of the local shell call.
	/// - Parameter callId: The unique ID of the local shell tool call generated by the model.
	/// - Parameter status: The status of the local shell call.
	/// - Parameter action: Execute a shell command on the server.
	static func localShellCall(id: String, callId: String, status: Item.LocalShellCall.Status, action: Item.LocalShellCall.Action) -> Self {
		.localShellCall(Item.LocalShellCall(id: id, callId: callId, status: status, action: action))
	}

	/// The output of a local shell tool call.
	///
	/// - Parameter id: The unique ID of the local shell tool call generated by the model.
	/// - Parameter status: The status of the item. Populated when items are returned via API.
	/// - Parameter output: A JSON string of the output of the local shell tool call.
	static func localShellCallOutput(id: String, status: Item.LocalShellCallOutput.Status? = nil, output: String) -> Self {
		.localShellCallOutput(Item.LocalShellCallOutput(id: id, status: status, output: output))
	}

	/// A tool call to run a tool on an MCP server.
	///
	/// See the [MCP tool guide](https://platform.openai.com/docs/guides/tools-mcp) for more information.
	/// - Parameter id: The unique ID of the tool call.
	/// - Parameter server: The label of the MCP server running the tool.
	/// - Parameter name: The name of the tool that was run.
	/// - Parameter arguments: A JSON string of the arguments passed to the tool.
	/// - Parameter output: The output from the tool call.
	/// - Parameter error: The error from the tool call, if any.
	static func mcpToolCall(id: String, server: String, name: String, arguments: String, output: String? = nil, error: String? = nil) -> Self {
		.mcpToolCall(Item.MCPToolCall(id: id, server: server, name: name, arguments: arguments, output: output, error: error))
	}

	/// A list of tools available on an MCP server.
	///
	/// See the [MCP tool guide](https://platform.openai.com/docs/guides/tools-mcp) for more information.
	/// - Parameter id: The unique ID of the list.
	/// - Parameter server: The label of the MCP server.
	/// - Parameter tools: The tools available on the server.
	/// - Parameter error: Error message if the server could not list tools.
	static func mcpListTools(id: String, server: String, tools: [Item.MCPListTools.MCPTool], error: String? = nil) -> Self {
		.mcpListTools(Item.MCPListTools(id: id, server: server, tools: tools, error: error))
	}

	/// A request for approval to run a tool on an MCP server.
	///
	/// See the [MCP tool guide](https://platform.openai.com/docs/guides/tools-mcp) for more information.
	/// - Parameter id: The unique ID of the approval request.
	/// - Parameter server: The label of the MCP server making the request.
	/// - Parameter name: The name of the tool to run.
	/// - Parameter arguments: A JSON string of arguments for the tool.
	static func mcpApprovalRequest(id: String, server: String, name: String, arguments: String) -> Self {
		.mcpApprovalRequest(Item.MCPApprovalRequest(id: id, server: server, name: name, arguments: arguments))
	}

	/// A response to an MCP approval request.
	///
	/// See the [MCP tool guide](https://platform.openai.com/docs/guides/tools-mcp) for more information.
	/// - Parameter id: The unique ID of the approval response.
	/// - Parameter approvalRequestId: The ID of the approval request being answered.
	/// - Parameter approve: Whether the request was approved.
	/// - Parameter reason: Optional reason for the decision.
	static func mcpApprovalResponse(id: String? = nil, approvalRequestId: String, approve: Bool, reason: String? = nil) -> Self {
		.mcpApprovalResponse(Item.MCPApprovalResponse(id: id, approvalRequestId: approvalRequestId, approve: approve, reason: reason))
	}
}

extension Item.ImageGenerationCall: Codable {
	private enum CodingKeys: String, CodingKey {
		case id, result, status
	}

	public func encode(to encoder: any Encoder) throws {
		var container = encoder.container(keyedBy: CodingKeys.self)
		try container.encode(id, forKey: .id)
		try container.encode(status, forKey: .status)
		try container.encodeIfPresent(result?.base64EncodedString(), forKey: .result)
	}

	public init(from decoder: any Decoder) throws {
		let container = try decoder.container(keyedBy: CodingKeys.self)
		id = try container.decode(String.self, forKey: .id)
		status = try container.decode(Status.self, forKey: .status)

		if let base64String = try container.decodeIfPresent(String.self, forKey: .result) {
			guard let data = Data(base64Encoded: base64String) else {
				throw DecodingError.dataCorruptedError(forKey: .result, in: container, debugDescription: "Invalid base64 string for result")
			}

			result = data
		}
	}
}
